{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Helm Charts","text":""},{"location":"charts/common/","title":"common","text":"<p>A Helm library chart for building application charts.</p> <p>Homepage: https://jasonb5.github.io/charts/site/charts/common/</p>"},{"location":"charts/common/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/common/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/common</li> </ul>"},{"location":"charts/common/#values","title":"Values","text":"Key Type Default Description workload string <code>nil</code> Workload can be cronjob, daemonset, deployment, job, pod, or statefulset. configmap object <code>nil</code> Map of ConfigMaps, these are not unique to the workload. secret object <code>nil</code> Map of Secrets, these are not unique to the workload. service.loadBalancerIP str <code>nil</code> Load baalancer IP, used when <code>service.type</code> is set to LoadBalancer. service.type str <code>\"ClusterIP\"</code> How the service is exposed. service.ports object <code>{\"default\":{\"port\":null}}</code> Map of service ports. ingress.enabled bool <code>false</code> Enable/disable ingress. ingress.hosts list <code>nil</code> List of ingress hosts. persistence object <code>nil</code> Map of persistence, these are specifi to the workload. annotations object <code>nil</code> Annotations for default workload. labels object <code>nil</code> Labels for default workload. extraWorkloads object <code>nil</code> Extra workloads to create. extraObjects object <code>nil</code> Extra objects to create. networkPolicy.enabled bool <code>false</code> Enable/disable NetworkPolicy. networkPolicy.disableDefaultEgress bool <code>false</code> Disable default egress rules. networkPolicy.disableDefaultIngress bool <code>false</code> Disable default ingress rules. networkPolicy.egress list <code>nil</code> Egress rules that will be merged with default rules. networkPolicy.ingress list <code>nil</code> Ingress rules that will be merged with default rules. concurrencyPolicy string <code>nil</code> CronJob concurrency policy failedJobHistoryLimit string <code>nil</code> CronJob job history schedule string <code>nil</code> CronJob schedule startingDeadlineSeconds string <code>nil</code> CronJob starting deadline successfulJobHistoryLimit string <code>nil</code> CronJob job history timeZone string <code>nil</code> CronJob time zone jobActiveDeadlineSeconds string <code>nil</code> Job active deadline backoffLimit string <code>nil</code> Job backoff limit backoffLimitPerIndex string <code>nil</code> Job backoff limit per index completionMode string <code>nil</code> Job completion mode completions string <code>nil</code> Job completions maxFailedIndexes string <code>nil</code> Job max failed indexes parallelism string <code>nil</code> Job parallelism podFailurePolicy string <code>nil</code> Job pod failure policy podReplacementPolicy string <code>nil</code> Job pod replacement policy ttlSecondsAfterFinished string <code>nil</code> Job ttl seconds after finished minReadySeconds string <code>nil</code> Deployment, DaemonSet, StatefulSet min ready seconds progressDeadlineSeconds string <code>nil</code> Deployment, DaemonSet, StatefulSet progress deadline seconds replicas int <code>1</code> Deployment, DaemonSet, StatefulSet number of pod replicas revisionHistoryLimit string <code>nil</code> Deployment, DaemonSet, StatefulSet revision history limit strategy object <code>{\"type\":\"Recreate\"}</code> Deployment, DaemonSet, StatefulSet strategy updateStrategy object <code>{\"type\":\"OnDelete\"}</code> StatefulSets, DaemonSet update strategy ordinals string <code>nil</code> StatefulSets ordinals persistentVolumeClaimRetentionPolicy string <code>nil</code> StatefulSets persistent volume claim retention policy podManagementPolicy string <code>nil</code> StatefulSets pod management policy serviceName string <code>nil</code> StatefulSets service name volumeClaimTemplates string <code>nil</code> StatefulSets volume claim templates activeDeadlineSeconds string <code>nil</code> Pod active deadline seconds affinity string <code>nil</code> Pod affinity dnsConfig string <code>nil</code> Pod dns config dnsPolicy string <code>nil</code> Pod dns policy hostAliases string <code>nil</code> Pod host aliases hostIPC string <code>nil</code> Pod pass through host IPC hostNetwork string <code>nil</code> Pod pass through host network hostPID string <code>nil</code> Pod pass through host PID hostUsers string <code>nil</code> Pod pass through host users hostname string <code>nil</code> Pod hostname initContainers string <code>nil</code> Pod init containers extraContainers string <code>nil</code> Pod extra containers to include with the default container nodeName string <code>nil</code> Pod nodeName nodeSelector string <code>nil</code> Pod node selector preemptionPolicy string <code>nil</code> Pod preemption policy priority string <code>nil</code> Pod priority priorityClassName string <code>nil</code> Pod priority class name podRestartPolicy string <code>nil</code> Pod restart poliyc runtimeClassName string <code>nil</code> Pod runtime class name podSecurityContext string <code>nil</code> Pod security context serviceAccount string <code>nil</code> Pod service account terminationGracePeriodSeconds string <code>nil</code> Pod termination grace period seconds tolerations string <code>nil</code> Pod tolerations args string <code>nil</code> Container args command string <code>nil</code> Container command env string <code>nil</code> Container env envFrom string <code>nil</code> Container envFrom image.repository string <code>nil</code> Container repository image.tag string <code>nil</code> Container tag image.pullSecrets string <code>nil</code> Container pullSecrets image.pullPolicy string <code>nil</code> Cotnainer pullPolicy lifecycle string <code>nil</code> Container lifecycle livenessProbe object <code>{\"tcpSocket\":{\"port\":\"default\"}}</code> Container livenessProbe livenessProbe.tcpSocket.port str <code>\"default\"</code> Liveness probe port target readinessProbe object <code>{\"tcpSocket\":{\"port\":\"default\"}}</code> Container readinessProbe readinessProbe.tcpSocket.port str <code>\"default\"</code> Readiness probe port target resources string <code>nil</code> Container resources restartPolicy string <code>nil</code> Container restartPolicy securityContext string <code>nil</code> Container security context startupProbe string <code>nil</code> Container startupProbe workingDir string <code>nil</code> Container working directory addons.codeserver.enabled bool <code>false</code> Enable/disable code server addon addons.codeserver.image object <code>{\"repository\":\"ghcr.io/linuxserver/code-server\",\"tag\":\"4.17.1\"}</code> Code server container image addons.codeserver.service.ports.codeserver.port int <code>8443</code> Code server port addons.codeserver.ingress.enabled bool <code>false</code> Enable/disable code server ingress addons.codeserver.ingress.hosts[0] object <code>{\"name\":\"codeserver\"}</code> Default code server host addons.codeserver.persistence.config.enabled bool <code>false</code> Enable/disable code server configuration persistence addons.rclone.enabled bool <code>false</code> Enable/disable rclone addon addons.rclone.env.CRON str <code>nil</code> Cron schedule. addons.rclone.env.SOURCE str <code>nil</code> Source remote name. addons.rclone.env.DESTINATION str <code>nil</code> Destination remote name. addons.rclone.env.FLAGS str <code>nil</code> Flags for the Rclone <code>[sync](https://rclone.org/commands/rclone_sync/)</code> command. addons.rclone.image object <code>{\"repository\":\"ghcr.io/jasonb5/rclone\",\"tag\":\"0.1.0\"}</code> Rclone container image <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"charts/gotify/","title":"gotify","text":"<p>a simple server for sending and receiving messages</p> <p>Homepage: https://gotify.net/</p>"},{"location":"charts/gotify/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/gotify/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/gotify</li> <li>https://github.com/gotify</li> </ul>"},{"location":"charts/gotify/#requirements","title":"Requirements","text":"Repository Name Version https://jasonb5.github.io/charts common 0.1.x"},{"location":"charts/gotify/#values","title":"Values","text":"Key Type Default Description workload string <code>\"deployment\"</code> The default workload type image.repository string <code>\"gotify/server\"</code> Container image repository image.tag string Chart.AppVersion Image tag env.TZ string <code>\"UTC\"</code> Set the timezone env.GOTIFY_SERVER_PORT string <code>\"{{ .Values.service.ports.default.port }}\"</code> Default server port env.GOTIFY_DEFAULTUSER_NAME string <code>\"admin\"</code> Default username env.GOTIFY_DEFAULTUSER_PASS string <code>\"admin\"</code> Default password service object <code>{\"ports\":{\"default\":{\"port\":80}}}</code> Service service.ports.default.port int <code>80</code> Default port ingress object <code>{\"enabled\":false,\"hosts\":[{\"host\":null,\"name\":\"default\"}],\"tls\":{\"enabled\":false}}</code> Ingress ingress.enabled bool <code>false</code> Enable/disable ingress ingress.hosts[0] object <code>{\"host\":null,\"name\":\"default\"}</code> Reference default service ingress.hosts[0].host string <code>nil</code> Ingress host ingress.tls object <code>{\"enabled\":false}</code> TLS ingress.tls.enabled bool <code>false</code> Enable/disable tls persistence object <code>{\"data\":{\"enabled\":false,\"mountPath\":\"/app/data\",\"type\":null}}</code> Persistence persistence.data.enabled bool <code>false</code> Enable/disable data mount persistence.data.mountPath string <code>\"/app/data\"</code> Data mount path persistence.data.type string <code>nil</code> Type of volume mount <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"charts/home-assistant/","title":"home-assistant","text":"<p>Open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server.</p> <p>Homepage: https://www.home-assistant.io/</p>"},{"location":"charts/home-assistant/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/home-assistant/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/home-assistant</li> <li>https://github.com/home-assistant</li> </ul>"},{"location":"charts/home-assistant/#requirements","title":"Requirements","text":"Repository Name Version https://jasonb5.github.io/charts common 0.1.x"},{"location":"charts/home-assistant/#values","title":"Values","text":"Key Type Default Description workload string <code>\"deployment\"</code> The default workload type image.repository string <code>\"ghcr.io/home-assistant/home-assistant\"</code> Container image repository image.tag string Chart.AppVersion Image tag hostNetwork bool <code>false</code> Use host's network namespace, may need to be set to <code>true</code> for device discovery. env.TZ string <code>\"UTC\"</code> Set the timezone service object <code>{\"ports\":{\"default\":{\"port\":8123}}}</code> Service service.ports.default.port int <code>8123</code> Default port ingress object <code>{\"enabled\":false,\"hosts\":[{\"host\":null,\"name\":\"default\"}],\"tls\":{\"enabled\":false}}</code> Ingress ingress.enabled bool <code>false</code> Enable/disable ingress ingress.hosts[0] object <code>{\"host\":null,\"name\":\"default\"}</code> Reference default service ingress.hosts[0].host string <code>nil</code> Ingress hostname ingress.tls object <code>{\"enabled\":false}</code> TLS ingress.tls.enabled bool <code>false</code> Enable/disable tls persistence object <code>{\"config\":{\"enabled\":false,\"type\":null}}</code> Persistence persistence.config.enabled bool <code>false</code> Enable/disable config path persistence.config.type string <code>nil</code> Type of volume mount <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"charts/jellyfin/","title":"jellyfin","text":"<p>Jellyfin is a Free Software Media System that puts you in control of managing and streaming your media. It is an alternative to the proprietary Emby and Plex, to provide media from a dedicated server to end-user devices via multiple apps. Jellyfin is descended from Emby's 3.5.2 release and ported to the .NET Core framework to enable full cross-platform support. There are no strings attached, no premium licenses or features, and no hidden agendas: just a team who want to build something better and work together to achieve it.</p> <p>Homepage: https://jellyfin.org/</p>"},{"location":"charts/jellyfin/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/jellyfin/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/jellyfin</li> <li>https://github.com/jellyfin/jellyfin</li> </ul>"},{"location":"charts/jellyfin/#requirements","title":"Requirements","text":"Repository Name Version https://jasonb5.github.io/charts common 0.1.x"},{"location":"charts/jellyfin/#values","title":"Values","text":"Key Type Default Description workload string <code>\"deployment\"</code> The default workload type image.repository string <code>\"ghcr.io/linuxserver/jellyfin\"</code> Container image repository image.tag string Chart.AppVersion Image tag env.TZ string <code>\"UTC\"</code> Set the timezone hostNetwork bool <code>false</code> Enable host network to expose discovery ports service object <code>{\"ports\":{\"default\":{\"port\":8096},\"discovery\":{\"port\":7359},\"svc-discovery\":{\"port\":1900}}}</code> Service service.ports.default.port int <code>8096</code> HTTP port service.ports.svc-discovery.port int <code>1900</code> Service discovery port service.ports.discovery.port int <code>7359</code> Discovery port ingress object <code>{\"enabled\":false,\"hosts\":[{\"host\":null,\"name\":\"default\"}],\"tls\":{\"enabled\":false}}</code> Ingress ingress.enabled bool <code>false</code> Enable/disable ingress ingress.hosts[0] object <code>{\"host\":null,\"name\":\"default\"}</code> Reference default service ingress.hosts[0].host string <code>nil</code> Ingress hostname ingress.tls object <code>{\"enabled\":false}</code> TLS ingress.tls.enabled bool <code>false</code> Enable/disable tls persistence object <code>{\"data\":{\"enabled\":false,\"type\":null},\"media\":{\"enabled\":false,\"type\":null}}</code> Persistence persistence.data.enabled bool <code>false</code> Enable/disable data mount persistence.data.type string <code>nil</code> Type of volume mount persistence.media object <code>{\"enabled\":false,\"type\":null}</code> Media mount persistence.media.enabled bool <code>false</code> Enable/disable media mount persistence.media.type string <code>nil</code> Type of volume mount <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"charts/kavita/","title":"kavita","text":"<p>Kavita is a fast, feature rich, cross platform reading server. Built with a focus for being a full solution for all your reading needs. Setup your own server and share your reading collection with your friends and family!</p> <p>Homepage: https://www.kavitareader.com/</p>"},{"location":"charts/kavita/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/kavita/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/kavita</li> <li>https://github.com/Kareadita/Kavita</li> </ul>"},{"location":"charts/kavita/#requirements","title":"Requirements","text":"Repository Name Version https://jasonb5.github.io/charts common 0.1.x"},{"location":"charts/kavita/#values","title":"Values","text":"Key Type Default Description workload string <code>\"deployment\"</code> The default workload type image.repository string <code>\"ghcr.io/linuxserver/kavita\"</code> Container image repository image.tag string Chart.AppVersion Image tag env.TZ string <code>\"UTC\"</code> Set the timezone service object <code>{\"ports\":{\"default\":{\"port\":5000}}}</code> Service service.ports.default.port int <code>5000</code> Default port ingress object <code>{\"enabled\":false,\"hosts\":[{\"host\":null,\"name\":\"default\"}],\"tls\":{\"enabled\":false}}</code> Ingress ingress.enabled bool <code>false</code> Enable/disable ingress ingress.hosts[0] object <code>{\"host\":null,\"name\":\"default\"}</code> Reference default service ingress.hosts[0].host string <code>nil</code> Ingress hostname ingress.tls object <code>{\"enabled\":false}</code> TLS ingress.tls.enabled bool <code>false</code> Enable/disable tls persistence object <code>{\"config\":{\"enabled\":false,\"type\":null},\"media\":{\"enabled\":false,\"type\":null}}</code> Persistence persistence.config.enabled bool <code>false</code> Enable/disable config mount persistence.config.type string <code>nil</code> Type of volume mount persistence.media.enabled bool <code>false</code> Eanble/disable media mount persistence.media.type string <code>nil</code> Type of volume mount <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"charts/mealie/","title":"mealie","text":"<p>A self-hosted recipe manager and meal planner with a RestAPI backend and a reactive frontend application built in Vue for a pleasant user experience for the whole family.</p> <p>Homepage: https://mealie.io/</p>"},{"location":"charts/mealie/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/mealie/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/mealie</li> <li>https://github.com/mealie-recipes/mealie</li> </ul>"},{"location":"charts/mealie/#requirements","title":"Requirements","text":"Repository Name Version https://jasonb5.github.io/charts common 0.1.x"},{"location":"charts/mealie/#values","title":"Values","text":"Key Type Default Description workload string <code>\"deployment\"</code> The default workload type image.repository string <code>\"ghcr.io/mealie-recipes/mealie\"</code> Container image repository image.tag string Chart.AppVersion Image tag env.TZ string <code>\"UTC\"</code> Set the timezone service object <code>{\"ports\":{\"default\":{\"port\":9000}}}</code> Service service.ports.default.port int <code>9000</code> Default port ingress object <code>{\"enabled\":false,\"hosts\":[{\"host\":null,\"name\":\"default\"}],\"tls\":{\"enabled\":false}}</code> Ingress ingress.enabled bool <code>false</code> Enable/disable ingress ingress.hosts[0] object <code>{\"host\":null,\"name\":\"default\"}</code> Reference default service ingress.hosts[0].host string <code>nil</code> Ingress hostname ingress.tls object <code>{\"enabled\":false}</code> TLS ingress.tls.enabled bool <code>false</code> Enable/disable tls persistence object <code>{\"config\":{\"enabled\":false,\"mountPath\":\"/app/data\",\"type\":null}}</code> Persistence persistence.config.enabled bool <code>false</code> Enable/disable config mount persistence.config.mountPath string <code>\"/app/data\"</code> Volume mount path persistence.config.type string <code>nil</code> Type of volume mount <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"charts/node-red/","title":"node-red","text":"<p>Node-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.It provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette that can be deployed to its runtime in a single-click.</p> <p>Homepage: https://nodered.org/</p>"},{"location":"charts/node-red/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/node-red/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/node-red</li> <li>https://github.com/node-red/node-red</li> </ul>"},{"location":"charts/node-red/#requirements","title":"Requirements","text":"Repository Name Version https://jasonb5.github.io/charts common 0.1.x"},{"location":"charts/node-red/#values","title":"Values","text":"Key Type Default Description workload string <code>\"deployment\"</code> The default workload type image.repository string <code>\"nodered/node-red\"</code> Container image repository image.tag string Chart.AppVersion Image tag env.TZ string <code>\"UTC\"</code> Set the timezone service object <code>{\"ports\":{\"default\":{\"port\":1880}}}</code> Service service.ports.default.port int <code>1880</code> Default port ingress object <code>{\"enabled\":false,\"hosts\":[{\"host\":null,\"name\":\"default\"}],\"tls\":{\"enabled\":false}}</code> Ingress ingress.enabled bool <code>false</code> Enable/disable ingress ingress.hosts[0] object <code>{\"host\":null,\"name\":\"default\"}</code> Reference default service ingress.hosts[0].host string <code>nil</code> Ingress hostname ingress.tls object <code>{\"enabled\":false}</code> TLS ingress.tls.enabled bool <code>false</code> Enable/disable tls persistence object <code>{\"config\":{\"enabled\":false,\"mountPath\":\"/data\",\"type\":null}}</code> Persistence persistence.config.enabled bool <code>false</code> Enable/disable config mount persistence.config.mountPath string <code>\"/data\"</code> Config mount path persistence.config.type string <code>nil</code> Type of volume mount <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"charts/zwave-js-ui/","title":"zwave-js-ui","text":"<p>Full featured Z-Wave Control Panel and MQTT Gateway.</p> <p>Homepage: https://zwave-js.github.io/zwave-js-ui/#/</p>"},{"location":"charts/zwave-js-ui/#maintainers","title":"Maintainers","text":"Name Email Url jasonb5"},{"location":"charts/zwave-js-ui/#source-code","title":"Source Code","text":"<ul> <li>https://github.com/jasonb5/charts/tree/main/charts/zwave-js-ui</li> <li>https://github.com/zwave-js/zwave-js-ui</li> </ul>"},{"location":"charts/zwave-js-ui/#requirements","title":"Requirements","text":"Repository Name Version https://jasonb5.github.io/charts common 0.1.x"},{"location":"charts/zwave-js-ui/#values","title":"Values","text":"Key Type Default Description workload string <code>\"deployment\"</code> The default workload type image.repository string <code>\"ghcr.io/zwave-js/zwave-js-ui\"</code> Container image repository image.tag string Chart.AppVersion Image tag env object <code>{\"TZ\":\"UTC\"}</code> Environment variables Customize environment variables env.TZ string <code>\"UTC\"</code> Set the timezone service object <code>{\"ports\":{\"default\":{\"port\":8091},\"websocket\":{\"port\":3000}}}</code> Service service.ports.default.port int <code>8091</code> Default port service.ports.websocket.port int <code>3000</code> Web socket port ingress object <code>{\"enabled\":false,\"hosts\":[{\"host\":null,\"name\":\"default\"}],\"tls\":{\"enabled\":false}}</code> Ingress ingress.enabled bool <code>false</code> Enable/disable ingress ingress.hosts[0] object <code>{\"host\":null,\"name\":\"default\"}</code> Reference default service ingress.hosts[0].host string <code>nil</code> Ingress hostname ingress.tls object <code>{\"enabled\":false}</code> TLS ingress.tls.enabled bool <code>false</code> Enable/disable tls persistence object <code>{\"config\":{\"enabled\":false,\"mountPath\":\"/usr/src/app/store\",\"type\":null},\"zwave\":{\"enabled\":false,\"mountPath\":\"/dev/zwave\",\"mountType\":\"CharDevice\",\"path\":null,\"type\":\"hostpath\"}}</code> Persistence persistence.config.enabled bool <code>false</code> Enable/disable config mount persistence.config.mountPath string <code>\"/usr/src/app/store\"</code> Config mount path persistence.config.type string <code>nil</code> Type of volume mount persistence.zwave object <code>{\"enabled\":false,\"mountPath\":\"/dev/zwave\",\"mountType\":\"CharDevice\",\"path\":null,\"type\":\"hostpath\"}</code> Z-Wave device mount persistence.zwave.enabled bool <code>false</code> Enable/disable zwave device mount persistence.zwave.type string <code>\"hostpath\"</code> Mount must be a hostpath persistence.zwave.path string <code>nil</code> Host path to Z-Wave device e.g. /dev/serial/by-id/... persistence.zwave.mountType string <code>\"CharDevice\"</code> Hostpath mount type must be CharDevice persistence.zwave.mountPath string <code>\"/dev/zwave\"</code> Mount zwave device path <p>Autogenerated from chart metadata using helm-docs v1.11.3</p>"},{"location":"guide/common-library/","title":"Common library","text":"<p>This Helm library chart is used to build application charts.</p> <p>Everything in the <code>values.yaml</code> is defined as a map, where the key is the name of the Kubernetes resource. There can only be a single <code>default</code> key, any other key will be appended to the default resource name, e.g. <code>config</code> would be appended as <code>-config</code> to the default name.</p>"},{"location":"guide/common-library/#workload","title":"Workload","text":"<p>Workload can be set to <code>deployment</code>, <code>statefulset</code>, <code>daemonset</code>, <code>job</code>, or <code>cronjob</code>.</p> <pre><code>workload: deployment\n</code></pre>"},{"location":"guide/common-library/#no-workload","title":"No Workload","text":"<p>If workload is not defined then no default workload is generated. This can be useful to create any top-level objects e.g. <code>configmap</code>, <code>secret</code>, or <code>extraObjects</code>.</p>"},{"location":"guide/common-library/#configmap","title":"ConfigMap","text":"<p>ConfigMaps are defined in a map, where each key is a separate ConfigMap. The following example would create two ConfigMap objects. The values of the ConfigMap keys can be templates to reference other resource definitions.</p> <pre><code>configmap:\n  default:\n    CONFIG_PATH: /config\n  app:\n    PORT: \"{{ .Values.service.ports.default.port }}\"\n</code></pre>"},{"location":"guide/common-library/#referencing-a-configmap","title":"Referencing a ConfigMap","text":"<p>To reference a ConfigMap in the default container using <code>envFrom</code> you simply use the key of the ConfigMap.</p> <pre><code>envFrom:\n  default:\n    type: configmap\n</code></pre> <p>This works for <code>extraContainers</code> as well.</p> <pre><code>extraContainers:\n  sidecar:\n    envFrom:\n      default:\n        type: configmap\n</code></pre>"},{"location":"guide/common-library/#secret","title":"Secret","text":"<p>Secrets like ConfigMaps are defined in a map, where each key is a separate Secret. The following example would create two Secret objects. The values of the Secret keys can be templates to reference other resource definitions.</p> <pre><code>secret:\n  default:\n    data:\n      PASSWORD: abcd1234\n  app:\n    data:\n      DB_PASSWORD: 1234\n</code></pre>"},{"location":"guide/common-library/#reference-secret","title":"Reference Secret","text":"<p>To reference a Secret in the default container using <code>envFrom</code> you simply use the key of the Secret.</p> <pre><code>envFrom:\n  default:\n    type: secret\n</code></pre> <p>This works for <code>extraContainers</code> as well.</p> <pre><code>extraContainers:\n  sidecar:\n    envFrom:\n      default:\n        type: secret\n</code></pre>"},{"location":"guide/common-library/#persistence","title":"Persistence","text":"<p>Persistence is defined as a map, the key can be used to reference the storage. The <code>type</code> can be <code>configmap</code>, <code>emptydir</code>, <code>hostpath</code>, <code>nfs</code>, <code>pvc</code>, or <code>secret</code>.</p> <pre><code>persistence:\n  config:\n    type: emptydir\n  data:\n    type: nfs\n    server: 192.168.0.1\n    path: /mnt/user/appdata\n</code></pre>"},{"location":"guide/common-library/#service","title":"Service","text":"<p>Each workload has a single service. Each key under <code>ports</code> references a single port of the default container.</p> <pre><code>service:\n  ports:\n    default:\n      port: 80\n    https:\n      port: 443\n</code></pre>"},{"location":"guide/common-library/#ingress","title":"Ingress","text":"<p>Each workload has a single ingress, which is disabled by default. Each item under <code>hosts</code> is an ingress path, at a minimum <code>name</code> needs to be defined to reference the target service. If <code>host</code> is not defined on the ingress path then the host will default to \"*\". If the <code>paths</code> key is not defined on the ingress path, then a default path will be added for \"/\".</p> <pre><code>ingress:\n  enabled: true\n  hosts:\n  # A basic ingress path that will have a single path `/` to the default service\n  - name: default\n  - name: https\n    host: domain.io\n    paths:\n    - path: /home\n      pathType: Prefix\n</code></pre>"},{"location":"guide/common-library/#tls","title":"TLS","text":"<p>If the <code>tls</code> key under <code>ingress</code> is present then it's value will be the secret name containing the certs. The <code>hosts</code> key under <code>tls</code> will be auto populated with any hosts that are defined.</p> <pre><code>ingress:\n  enabled: true\n  hosts:\n  - name: https\n    host: domain.io\n    paths:\n    - path: /home\n  tls: tls-certs\n</code></pre>"},{"location":"guide/common-library/#network-policy","title":"Network Policy","text":"<p>The network policy is disabled by default. Once enabled the default policy will add ingress rules for each service port and allows all egress traffic. Custom egress and ingress rules can be added to <code>egress</code> and <code>ingress</code> keys, these will be merged with the default rules. The default rules can be disabled with <code>disableDefaultEgress</code> and <code>disableDefaultIngress</code>.</p> <pre><code>networkPolicy:\n  enabled: true\n  disableDefaultEgress: false\n  disableDefaultIngress: false\n  egress:\n  ingress:\n</code></pre>"},{"location":"guide/common-library/#addons","title":"Addons","text":"<p>The common library provides addons that are attached as <code>extraContainers</code>.</p>"},{"location":"guide/common-library/#visual-studio-code","title":"Visual Studio Code","text":"<p>This addon will attach a sidecar running <code>Visual Code Studio</code>. The addons uses the <code>ghcr.io/linuxserver/code-server</code> container. The minimal configuration requires an ingress and persistence be defined.</p> <pre><code>addons:\n  codeserver:\n    enabled: true\n    ingress:\n      hosts:\n      - name: codeserver\n        host: code.domain.io\n    persistence:\n      config:\n        type: pvc\n</code></pre>"},{"location":"guide/common-library/#rclone","title":"Rclone","text":"<p>This addon will attach a sidecar to run <code>Rclone</code> using Cron. The minimum configuration requires an rclone configuration file and the <code>CRON</code>, <code>SOURCE</code>, and <code>DESTINATION</code> environment variables be defined.</p> <pre><code>secret:\n  rclone:\n    data: \n      rclone.conf: |\n        [host]\n        type = local\n\n        [home]\n        type = alias\n        remote = host:/home/user\n\n        [external]\n        type = alias\n        remote = host:/mnt/external\n\naddons:\n  rclone:\n    enabled: true\n    env:\n      CRON: '0 2 * * *'\n      SOURCE: home\n      DESTINATION: external\n      FLAGS: '--create-empty-src-dirs'\n    persistence:\n      rclone:\n        type: secret\n        subPath: rclone.conf\n        mountPath: /root/.config/rclone/rclone.conf\n</code></pre>"},{"location":"guide/getting-started/","title":"Getting Started","text":"<p>This repository provides many homelab related Helm charts. There is a common library designed to simplify creating new Helm charts.</p>"},{"location":"guide/getting-started/#adding-chart-repository","title":"Adding chart repository","text":"<p>To install the Helm charts provided by this repository you'll need to install Helm and add this repository.</p> <pre><code>helm repo add homelab https://jasonb5.github.io/charts\n</code></pre>"},{"location":"guide/getting-started/#list-charts","title":"List charts","text":"<p>List the charts available in the repository.</p> <pre><code>helm search repo homelab\n</code></pre>"},{"location":"guide/getting-started/#install-a-chart","title":"Install a chart","text":"<p>A Helm chart can be install with the following command.</p> <pre><code>helm install homelab/&lt;chart name&gt; --generate-name\n</code></pre>"},{"location":"guide/getting-started/#creating-a-new-chart","title":"Creating a new chart","text":"<p>A copier template is provided to create new Helm charts. The template uses the common library to build the chart. It also provides scaffolding for common dependencies e.g. Redis, MariaDB, and PostgreSQL.</p> <pre><code>pip install copier\n\nmake new-chart\n</code></pre>"}]}